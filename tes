# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    Makefile                                           :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: najeuneh < najeuneh@student.s19.be >       +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/02/22 17:24:32 by najeuneh          #+#    #+#              #
#    Updated: 2024/09/09 15:45:37 by najeuneh         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

RED=\033[0;31m
GREEN=\033[0;32m
YELLOW=\033[1;33m
BLUE=\033[0;34m
ORANGE=\033[38;2;255;165;0m
NC=\033[0m 

CC = gcc

MY_SOURCES = src/lexer.c src/main.c src/signal.c src/parser/parcer.c src/parser/parser_utils.c src/heredoc.c src/parser/parser_utils2.c \
			src/exec/exec.c src/exec/exec_utils.c src/bultins/echo.c src/bultins/bultins_utils.c \
			src/bultins/cd.c src/bultins/env.c src/bultins/exit.c src/bultins/export.c src/bultins/pwd.c src/bultins/unset.c \
			src/expender/expender.c src/heredoc2.c src/parser/parser_utils3.c \
			src/expender/expender_utils.c src/expender/expender_utils2.c src/bultins/export_utils.c \
			src/expender/expender_utils3.c src/bultins/export_utils2.c src/free.c src/signal_exec.c \
			src/bultins/bultins_utils2.c src/bultins/export_utils3.c src/expender/expender_utils4.c \
			src/main_utils.c src/environment.c src/exec/exec_utils2.c \

CFLAGS = -Wall -Wextra -Werror

LINK = -L/Users/$(shell whoami)/.brew/opt/readline/lib -I/Users/$(shell whoami)/.brew/opt/readline/include -lreadline

OBJS_DIR = obj/

SRCS_DIR = src/

NAME = minishell


INCLUDE = ./inc/minishell.h

INCLUDE2 = ./inc/pipex.h

INCLUDE3 = ./inc/libft.h

INCLUDE4 = ./inc/ft_printf.h

LIBFT = ./libft

LIBFT.A = ./libft/libft.a

PRINTF = ./ft_printf

PRINTF.A = ./ft_printf/libftprintf.a


MY_OBJECTS = $(MY_SOURCES:$(SRCS_DIR)%.c=$(OBJS_DIR)%.o)

RM = rm -f

all: $(NAME)

$(NAME) : $(MY_OBJECTS)
	@make -C $(LIBFT)
	@printf "                                               \r"
	@echo "																					 "
	@echo "           _       _     _          _ _ "
	@echo "          (_)     (_)   | |        | | |"
	@echo " _ __ ___  _ _ __  _ ___| |__   ___| | |"
	@echo "| '_   _ \| |  _ \| / __| '_ \ / _ \ | |"
	@echo "| | | | | | | | | | \__ \ | | |  __/ | |"
	@echo "|_| |_| |_|_|_| |_|_|___/_| |_|\___|_|_|"
	@echo "                                                                                  "    	
	cc $(CFLAGS) $(MY_OBJECTS) $(LIBFT.A) $(LINK) -o $(NAME)

$(OBJS_DIR)%.o : $(SRCS_DIR)%.c
	@mkdir -p $(OBJS_DIR)
	@mkdir -p $(OBJS_DIR)/bultins
	@mkdir -p $(OBJS_DIR)/expender
	@mkdir -p $(OBJS_DIR)/parser
	@mkdir -p $(OBJS_DIR)/exec
	$(CC) $(CFLAGS) -I/inc/ -g -o $@ -c $<

debug: $(MY_OBJECTS)
	@make -C $(LIBFT)
	@gcc -fsanitize=address -g $(MY_OBJECTS) $(LIBFT.A) -I/inc/ $(LINK) -o $(NAME)
	
clean:
	@make clean -C $(LIBFT)
	@${RM} ${MY_OBJECTS}


fclean: clean
	@make fclean -C $(LIBFT)
	@${RM} ${NAME}

re: fclean all

.PHONY: fclean re clean all
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   lexer.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: najeuneh < najeuneh@student.s19.be >       +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/07/29 18:49:55 by najeuneh          #+#    #+#             */
/*   Updated: 2024/09/05 20:27:10 by najeuneh         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../inc/minishell.h"

char	check_sep(char c, char *charset)
{
	int	i;

	i = 0;
	while (charset[i])
	{
		if (c == charset[i])
			return (0);
		i++;
	}
	return (1);
}

void	lexer(t_stack *stack, char *line, int start, t_env *envp)
{
	int		i;
	t_node	*node;

	node = NULL;
	i = 0;
	while (line && line[i])
	{
		while (line[i] && (line[i] == 32 || line[i] == '	'))
			i++;
		if (line[i] == '"' || line[i] == 39)
		{
			start = i;
			i++;
			while (line[i++] && (line[i] != '"' || line[i] != 39))
			{
				if (line[i] == '"' && line[i + 1] == '"')
					i += 2;
			}
			i++;
			dl_lstadd_back(stack, line, start, i);
		}
		else
			i = lexer_suite(stack, line, start, i);
	}
	ft_lexer2(line, stack, node, envp);
}

int	lexer_suite(t_stack *stack, char *line, int start, int i)
{
	if (line[i] && check_sep(line[i], "|&<>()`") == 1)
	{
		start = i;
		while (line[i] && check_sep(line[i], "|&<>()` ") == 1
			&& line[i] != '"')
		{
			i++;
			if (line[i] == '"' && line[i] != 32
				&& check_sep(line[i], "|&<>()`") == 1)
			{
				while (line[i] && line[i] != 34)
				{
					i++;
				}
				i++;
			}
		}
		dl_lstadd_back(stack, line, start, i);
	}
	else if (line[i] && check_sep(line[i], "|&<>()`") == 0)
		i = lexer_suite2(stack, line, start, i);
	else
		i++;
	return (i);
}

int	lexer_suite2(t_stack *stack, char *line, int start, int i)
{
	start = i;
	while (line[i] && check_sep(line[i], "|&<>()`") == 0 && line[i] != '"')
		i++;
	dl_lstadd_back(stack, line, start, i);
	return (i);
}

void	ft_lexer2(char *line, t_stack *stack, t_node *node, t_env *envp)
{
	if (!line || stack->up == NULL)
		return ;
	if (ft_strcmp(stack->low->content, "|") == 0)
	{
		printf("minishell: syntax error: unexpected end of file\n");
		return ;
	}
	node = stack->up;
	while (node != NULL)
	{
		if (verif_char_special2(node->content, node->next) == 0)
			return ;
		node = node->next;
	}
	ft_expend(stack, envp);
	if (g_exit_code == -1)
	{
		g_exit_code = 1;
		return ;
	}
	ft_parser(stack, envp);
	exec(stack, envp, 0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: najeuneh < najeuneh@student.s19.be >       +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/07/29 18:36:14 by najeuneh          #+#    #+#             */
/*   Updated: 2024/09/09 14:20:32 by najeuneh         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../inc/minishell.h"

char	**create_matrix_env(void)
{
	char	**m;
	char	*tmp;
	char	*tmp2;

	tmp = ft_strdup("_=/Users/najeuneh/Desktop/cursus");
	tmp2 = ft_strdup("/minishell-42-sami-nat/./minishell");
	m = malloc(sizeof(char *) * 4);
	m[0] = ft_strdup("PWD=/Users/sadegrae/minishell/minishell-42-sami-nat-1");
	m[1] = ft_strdup("SHLVL=1");
	m[2] = ft_strjoin(tmp, tmp2);
	m[3] = NULL;
	free (tmp2);
	return (m);
}

void	shell_level(t_env *env)
{
	t_env	*tmp;
	int		count;

	while (env->next != NULL)
	{
		if (ft_strcmp(env->attribut, "SHLVL") == 0)
		{
			count = ft_atoi(env->content) + 1;
			free(env->content);
			env->content = ft_itoa(count);
			return ;
		}
		env = env->next;
	}
	tmp = malloc(sizeof(t_env));
	if (!tmp)
		return ;
	tmp->content = ft_strdup("1");
	tmp->attribut = ft_strdup("SHLVL");
	tmp->flag = 1;
	tmp->next = NULL;
	env->next = tmp;
	return ;
}

t_env	*list_new(char **matrix, int i, t_env *tmp)
{
	t_env	*new;
	t_env	*node;

	if (!matrix[0])
		matrix = create_matrix_env();
	while (matrix[++i])
	{
		new = malloc(sizeof(*new));
		if (!new)
			return (free(tmp), NULL);
		new->content = ft_strchr2(matrix[i], '=');
		new->attribut = ft_strcpy2(matrix[i], '=');
		new->flag = 1;
		new->next = NULL;
		if (!tmp)
			tmp = new;
		else
			node->next = new;
		node = new;
	}
	check_pwd(matrix, tmp);
	shell_level(tmp);
	return (tmp);
}

int	main(int ac, char **av, char **env)
{
	char	*line;
	t_stack	*stack;
	t_env	*list_env;

	(void)av;
	(void)ac;
	stack = NULL;
	list_env = list_new(env, -1, NULL);
	while (1)
	{
		ft_control(0);
		stack = ft_init_dl(stack);
		line = readline("minishell$ ");
		if (line == NULL)
		{
			ft_free_env(list_env);
			printf("\rexit\n");
			free_stack(stack);
			exit(0);
		}
		lexer(stack, line, 0, list_env);
		add_history(line);
		free_stack(stack);
		free(line);
	}
}
